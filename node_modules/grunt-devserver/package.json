{
  "name": "grunt-devserver",
  "version": "0.6.0",
  "description": "a simple web server without caching for development",
  "homepage": "https://github.com/devpaul/grunt-devserver",
  "author": {
    "name": "Paul Shannon"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/devpaul/grunt-devserver.git"
  },
  "bugs": {
    "url": "https://github.com/devpaul/grunt-devserver/issues"
  },
  "main": "lib/index",
  "scripts": {
    "test": "grunt test",
    "start": "node ./"
  },
  "dependencies": {
    "express": "~4.4.5",
    "morgan": "~1.1.1",
    "optimist": "~0.3",
    "pem": "~1.4.1",
    "q": "~1.0.1",
    "serve-index": "~1.1.4",
    "serve-static": "~1.2.3",
    "underscore": "~1.5.2",
    "methods": "1.0.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "mocha": "^1.20.1",
    "chai": "^1.9.1",
    "sinon": "^1.10.2",
    "sinon-chai": "^2.5.0",
    "supertest": "^0.13.0",
    "sandboxed-module": "^1.0.0",
    "grunt-mocha-test": "~0.11.0",
    "grunt-contrib-jshint": "~0.10.0",
    "chai-as-promised": "~4.1.1",
    "cucumber": "0.4.0",
    "grunt-cucumber": "~0.2.3",
    "temporary": "0.0.8"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "engine": {
    "node": ">=0.10"
  },
  "bin": {
    "devserver": "./bin/devserver"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "server"
  ],
  "readme": "# Developer Web Server\ngrunt-devserver provides a simple way to quickly get a development server serving up your content with\n\n* run from the command line or Grunt 0.4.x\n* no caching content\n* CORS headers for cross-domain requests\n* logs requests to console\n* quickly configure https server\n* redefine your middleware in configuration\n\nAs a developer I needed a lightweight way to serve up client-side applications and content in isolation from a larger\nserver application.  Something that supported a rapid workflow and integrated with my tools.\n\n[![Build Status](https://travis-ci.org/devpaul/grunt-devserver.png?branch=master)](https://travis-ci.org/devpaul/grunt-devserver) [![NPM version](https://badge.fury.io/js/grunt-devserver.png)](http://badge.fury.io/js/grunt-devserver)\n\n## Installation\nInstall it from the command line into your project\n```\nnpm install grunt-devserver --save-dev\n```\nOr install it globally\n```\nnpm install grunt-devserver -g\n```\n\n## Usage\n### From the Command Line\nOnce grunt-devserver has been installed globally you can run it from any folder by typing `devserver`\n\nCommand line options:\n```\n-t, --type (server type) http|https (default is http)\n-p, --port (port number) listen on this port\n-f, --folder (full path to a folder) serves this folder\n-s, --server start a server as defined in the configuration\n--cache (method) the method to return in the Cache-Control HTTP header. Default is no-cache.\n--file (filename) loads a js/json configuration file\n```\n\nFor more information on configuration files see [Configuration Files](#configuration)\n\n### From Grunt <a id=\"grunt\"></a>\nTo start a server through grunt you need a devserver configuration in your `Gruntfile.js` and tell\ngrunt to load `grunt-devserver` as an available task. For more information see [Configuring Tasks][Grunt Config].\n```\n    var config = {devserver: {server: {}}}\n    grunt.initConfig(config)\n    grunt.loadNpmTasks('grunt-devserver')\n```\n\nand execute using:\n```\n    grunt devserver\n```\n\nNow you can add the following options:\n```\ndevserver: { options: { 'type' : <string> (http|https defaults to http)\n                      , 'port' : <port number> (defaults to 8888)\n                      , 'base' : <directory> (defaults to .)\n                      , 'cache' : <string> (defaults to 'no-cache')\n                      , 'httpsOptions' : <object> https.createServer options\n                      , 'file' : <filename>\n                      , 'async' : <boolean> (defaults to true)\n                      , 'middleware' : <array> || <function> (defaults to predefined middleware)\n                      }\n           }\n```\n\nNOTE: Starting multiple devservers requires setting the `async` option to false so that other server tasks may be\nprocessed.  `async` can also be useful when a server is needed to support integration or functional testing.\n\nSee the [Configuration](#configuration) section for more information.\n\n### From Your Project\nYou can also use devserver directly as a module in your project.\n\n```\n    var devserver = require('grunt-devserver')\n      , options = { type: \"http\", port: 8000 }\n      , serverStarted = devserver(options)\n\n    serverStarted.then(function(server) {\n        // TODO something awesome\n    })\n```\n\n### From WebStorm\nAs a developer tool integration is extremely important.  If you are using a Jetbrains IDE like WebStorm\nhere are instructions to start a devserver directly in your IDE  by adding an entry to your\n[External Tools][jbExternalTools]:\n\n1. Go to Preferences > External Tools\n1. Click Add\n1. Fill in the form:\n    1. name: http\n    1. group: devserver\n    1. program: /usr/local/bin/devserver\n    1. paramters: --port $Prompt$\n    1. working directory: $FileDir$\n1. Hit OK. You should now be able to right-click on any folder and start your devserver!\n\n![WebStorm Usage](https://raw.githubusercontent.com/devpaul/grunt-devserver/master/docs/assets/webstorm.png)\n\n#### Troubleshooting\n*Q*: I am getting \"`env: node: No such file or directory`\"\n\nYou need to add node to your path.  On a Mac 10.8.x or later [see launchctl man page][launchctl]\n     for more information.\n\n1. From a terminal run ` sudo vim /etc/launchd.conf `\n1. Add ` setenv PATH /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin `\n1. Reboot\n\n## Configuration <a id=\"configuration\"></a>\nConfiguration files provide you with the same functionality as a grunt configuration and can easily be shared across\nprojects or used from the command-line.\n\n### Options\n\n#### type\nThe type of server\n\nType: `string`   \nDefault: `http`   \nCommand line: `-t, --type`   \n\n#### port\nThe port where the server will respond\n\ntype: `number`   \ndefault: `8888`   \ncommand line: `-p, --port`   \n\n#### base\nThe base directory of the web server.  This is where files will be served.  This configuration is passed to the\n`serve-index` middleware.\n\ntype: `String`   \ndefault: `'.'`   \ncommand line: `-f, --folder`   \n\n#### cache\nThe type of caching mechanism to use.  The `noCacheHeaders` middleware uses this value to add `Cache-Control`\nheaders to the HTTP response.\n\ntype: `String`   \ndefault: `no-cache`   \ncommand line: `--cache`   \n\n#### httpsOptions\n`httpsOptions` are passed directly through to node's https.createServer() method. [Read the docs for more information][nodehttps].\nThis is ignored unless the server type is specified as `https`.  When a signing certificate is not present, one will be\nautomatically generated.\n\ntype: `object`   \ndefault: none   \n\n#### file\nAs external configuration file. See [Using Configuration Files](#configuration) for samples on how to use file\nconfigurations with devserver\n\ntype: `string`   \ndefault: none   \ncommand line: `--file`   \n\n#### async\n`async` if set to true it will keep Grunt from terminating (see [Grunt Tasks])\n\ntype: `boolean`   \ndefault: `true`   \n\n#### middleware\nRedefines the middleware stack to be used by the server.\n\ntype: `array` or `function`   \ndefault: @see `model/CommonConfig.defaultMiddleware`   \n\nExample: redefine the middleware to log the request and send a hello world message\n```\n{ options: { middleware: [ morgan()\n                         , function(req, res, next) {\n                            res.send('Hello world!').end(200)\n                         }\n                         ]\n           }\n}\n```\n\nRoutes can also be used to define specific middleware handlers\n```\nvar route = require('devserver').middleware.route\nvar morgan = require('morgan')\n\nfunction getName(req, res, next) {\n    // retrieve the user name\n}\n\nfunction putName(req, res, next) {\n    // update the user name\n}\n\n{ options: { middleware: [ morgan()\n                         , route('/name/:id').get(getName).put(putName)\n                         ]\n           }\n}\n```\n\n\n### Option Precedence\nWhen a property exists in the grunt/command-line configuration and in the configuration file, the grunt/command-line\noption always overrides the file options.\n\n### Example\nA example devserverrc file\n```\n{ \"options\": { \"type\" : \"http\"\n             , \"port\" : 8888\n             }\n}\n```\n\nWhen this file is loaded from the command-line\n```\n    devserver --file \"./devserverrc\" --port 4321 --cache \"no-store\"\n```\n\nThe resulting configuration used by devserver\n```\n{ \"options\": { \"type\" : \"http\"\n             , \"port\" : 4321\n             , \"cache\" : \"no-store\"\n             }\n}\n```\n\n[nodehttps]: http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener\n[launchctl]: http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/launchctl.1.html\n[jbExternalTools]: http://www.jetbrains.com/idea/webhelp/external-tools.html\n[Grunt]: http://www.gruntjs.com\n[Grunt Tasks]: http://gruntjs.com/api/inside-tasks#this.async\n[Grunt Config]: http://gruntjs.com/configuring-tasks\n",
  "readmeFilename": "README.md",
  "_id": "grunt-devserver@0.6.0",
  "_shasum": "0974b9d57e14eec1ba8b0f9cbda1b7f7ecdc234e",
  "_from": "grunt-devserver@",
  "_resolved": "https://registry.npmjs.org/grunt-devserver/-/grunt-devserver-0.6.0.tgz"
}
